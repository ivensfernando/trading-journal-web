"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStore = useStore;
var react_1 = require("react");
var isEqual_1 = __importDefault(require("lodash/isEqual"));
var util_1 = require("../util");
var useStoreContext_1 = require("./useStoreContext");
function useStore(key, defaultValue) {
    var _a = (0, useStoreContext_1.useStoreContext)(), getItem = _a.getItem, setItem = _a.setItem, subscribe = _a.subscribe;
    var _b = (0, react_1.useState)(function () { return getItem(key, defaultValue); }), value = _b[0], setValue = _b[1];
    // subscribe to changes on this key, and change the state when they happen
    (0, react_1.useEffect)(function () {
        var storedValue = getItem(key, defaultValue);
        if (!(0, isEqual_1.default)(value, storedValue)) {
            setValue(storedValue);
        }
        var unsubscribe = subscribe(key, function (newValue) {
            setValue(typeof newValue === 'undefined' ? defaultValue : newValue);
        });
        return function () { return unsubscribe(); };
    }, [key, subscribe, defaultValue, getItem, value]);
    var set = (0, util_1.useEvent)(function (valueParam, runtimeDefaultValue) {
        var newValue = typeof valueParam === 'function' ? valueParam(value) : valueParam;
        // we only set the value in the Store;
        // the value in the local state will be updated
        // by the useEffect during the next render
        setItem(key, typeof newValue === 'undefined'
            ? typeof runtimeDefaultValue === 'undefined'
                ? defaultValue
                : runtimeDefaultValue
            : newValue);
    });
    return [value, set];
}
//# sourceMappingURL=useStore.js.map